#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
playlist-selection -- Create a playlist using matching tags

Searches playlists of images into a directories tree, the ones
matching the specified tags and date criteria are merged into a
single resulting playlist. If some playlists reference one image
more than once, the duplicates are removed from the result.

Playlist files must be named playlist_16x9.m3u or playlist.m3u,
tags and date is searched into a folder.nfo file.
"""

import argparse
import datetime
import hashlib
import logging
import os
import os.path
import random
import re
import sys
import xml.etree.ElementTree as ET

__author__ = "Niccolo Rigacci"
__copyright__ = "Copyright 2021 Niccolo Rigacci <niccolo@rigacci.org>"
__license__ = "GPLv3-or-later"
__email__ = "niccolo@rigacci.org"
__version__ = "0.0.5"

NFO_FILES = ['folder.nfo'];
PLAYLIST_FILES = ['playlist_16x9.m3u', 'playlist.m3u']

logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.ERROR)

#-------------------------------------------------------------------------
# Return a datetime.datetime object from a string, or None.
#-------------------------------------------------------------------------
def parse_date_tag(d):
    try:
        dt = datetime.datetime.strptime(d, '%Y-%m-%d %H:%M:%S')
    except:
        try:
            dt = datetime.datetime.strptime(d, '%Y-%m-%d %H:%M')
        except:
            try:
                dt = datetime.datetime.strptime(d, '%Y-%m-%d')
            except:
                try:
                    dt = datetime.datetime.strptime(d, '%Y-%m')
                except:
                    try:
                        dt = datetime.datetime.strptime(d, '%Y')
                    except:
                        dt = None
    return dt


#-------------------------------------------------------------------------
# Return True if the .nfo file matches the tags or date criteria.
# Tags are matched against the following lists:
#   TAGS_ALL      All the tags must match.
#   TAGS_ANY      At least one tag must match.
#   TAGS_EXCLUDE  None must match.
# If YEARS is defined, select if date year is into the list.
# Else if DATE_MIN or DATE_MAX are defined, select by date comparison. 
#-------------------------------------------------------------------------
def nfo_match(nfo_file):
    try:
        nfo_xml = ET.parse(nfo_file).getroot()
        tags = [t.text.lower().replace(',', '') for t in nfo_xml.findall('tag')]
    except:
        logging.error(f'Parsing file "{nfo_file}"')
        return False
    # The .nfo file may contains several <date> tags, get the first.
    date_tags = [t.text for t in nfo_xml.findall('date')]
    if len(date_tags) > 0:
        nfo_1st_date = parse_date_tag(date_tags[0])
    else:
        nfo_1st_date = None

    # If no match tags are specified, assume True as default and do match by date.
    match_by_tags = len(TAGS_ALL) > 0 or len(TAGS_ANY) > 0
    match_by_date = DATE_MIN != None or DATE_MAX != None or len(YEARS) > 0
    if not match_by_tags and match_by_date:
        nfo_does_match = True
    else:
        nfo_does_match = False

    # Verify match by tags.
    required_all_count = len(TAGS_ALL)
    for tag in tags:
        if tag in TAGS_ANY:
            logging.info(f'Considering "{dir_name}" because it contains the "{tag}" tag')
            nfo_does_match = True
            break
        if tag in TAGS_ALL:
            required_all_count -= 1
            if required_all_count == 0:
                logging.info(f'Considering "{dir_name}" because it contains all the tags {TAGS_ALL}')
                nfo_does_match = True
                break

    # Then verify match by date.
    if nfo_1st_date == None and match_by_date:
        logging.info(f'Excluding "{dir_name}" because date is missing, but a match was requested')
        nfo_does_match = False
    else:
        if len(YEARS) > 0:
            one_match = False
            # Compare all the <date> tags from the .nfo file.
            for tag in date_tags:
                dt = parse_date_tag(tag)
                if dt is not None:
                    if str(dt.year) in YEARS:
                        one_match = True
                        break
            if not one_match:
                logging.info(f'Excluding "{dir_name}" because date does not match years "{YEARS}"')
                nfo_does_match = False
        else:
            # In date range is requested, compare only the first <date> tag.
            if DATE_MIN:
                if nfo_1st_date < DATE_MIN:
                    logging.info(f'Excluding "{dir_name}" because date is lower than "{DATE_MIN}"')
                    nfo_does_match = False
            if DATE_MAX:
                if nfo_1st_date > DATE_MAX:
                    logging.info(f'Excluding "{dir_name}" because date is greather than "{DATE_MAX}"')
                    nfo_does_match = False
        if nfo_does_match:
            logging.info(f'Considering "{dir_name}" because it has dates "{date_tags}"')

    # Exclude unwanted tags.
    for tag in tags:
        if tag in TAGS_EXCLUDE:
            logging.debug(f'Excluding "{dir_name}" because it contains the "{tag}" tag')
            nfo_does_match = False
            break

    if nfo_does_match:
        logging.info(f'Including "{dir_name}" because it matches the requested criteria')

    return nfo_does_match


#-------------------------------------------------------------------------
# Return a list of all the <tag> elements found in .nfo files.
#-------------------------------------------------------------------------
def get_all_tags(root_dir):
    tags_found = []
    for dir_name, subdir_list, file_list in os.walk(root_dir):
        for filename in NFO_FILES:
            if filename in file_list:
                nfo_file = os.path.join(dir_name, filename)
                try:
                    nfo_xml = ET.parse(nfo_file).getroot()
                    tags = [ t.text.lower().replace(',', '') for t in nfo_xml.findall('tag') ]
                except:
                    logging.error(f'Parsing file "{nfo_file}"')
                    tags = []
                for t in tags:
                    if t not in tags_found:
                        tags_found.append(t)
                break
    return tags_found


#-------------------------------------------------------------------------
# Return a list of all the years from <date> found in .nfo files.
#-------------------------------------------------------------------------
def get_all_years(root_dir):
    years_found = []
    for dir_name, subdir_list, file_list in os.walk(root_dir):
        for filename in NFO_FILES:
            if filename in file_list:
                nfo_file = os.path.join(dir_name, filename)
                try:
                    nfo_xml = ET.parse(nfo_file).getroot()
                    dates = [ t.text.lower() for t in nfo_xml.findall('date') ]
                except:
                    logging.error(f'ERROR: Parsing file "{nfo_file}"')
                    dates = []
                for d in dates:
                    dt = parse_date_tag(d)
                    if dt is not None:
                        year = str(dt.year)
                        if year not in years_found:
                            years_found.append(year)
                break
    return years_found


#-------------------------------------------------------------------------
# Append entries from the source playlist to the destination one.
# Keep only entries with a valid geometry and remove duplicates.
#-------------------------------------------------------------------------
def add_playlist_entries(dir_name, playlist_file, output_file):
    global items_added
    with open(os.path.join(dir_name, playlist_file)) as fp:
        for line in fp:
            line = line.strip()
            if line.startswith('#'):
                # Skip comments.
                continue
            if '|' in line:
                filename, geometry = line.split('|')
                if not bool(re.match(r'^[0-9]+x[0-9]+', geometry)):
                    # Skip entries without a valid geometry.
                    continue
            else:
                # Skip any other line.
                continue
            item = '%s|%s' % (os.path.join(dir_name, filename), geometry)
            item_hash = hashlib.md5(item.encode('utf-8')).hexdigest()
            if (item_hash in items_added):
                # Skip duplicate entry.
                logging.debug(f'Skipping duplicate entry for "{filename}"')
                continue
            else:
                items_added.append(item_hash)
                output_file.write(item + u'\n')


#-------------------------------------------------------------------------
# Main program.
#-------------------------------------------------------------------------
parser = argparse.ArgumentParser(
    description='Create a playlist using matching tags.',
    epilog="Options --any, --all, --exclude and --years accept comma separated values.\nIf a match by date is requested (--years, --datemin or --datemax), it is intended to be combined with the AND operator to the request by --any and --all tags.",
    formatter_class=argparse.RawDescriptionHelpFormatter
)
parser.add_argument('--root',      help='root directory to search for playlists', type=str, required=True)
parser.add_argument('--any',       help='includes folders with at least one of these tags', type=str, metavar='TAGS')
parser.add_argument('--all',       help='includes folders with all these tags', type=str, metavar='TAGS')
parser.add_argument('--exclude',   help='exclude folders containing tags', type=str, metavar='TAGS')
parser.add_argument('--years',     help='include folders with the date year in the list', type=str, metavar='YEARS')
parser.add_argument('--datemin',   help='exclude folders dated before the minimum', type=str)
parser.add_argument('--datemax',   help='exclude folders dated later than the max', type=str)
parser.add_argument('--shuffle',   help='shuffle directories in output playlist', action='store_true')
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('--list-tags',  help='list all tags found in folder.nfo files', action='store_true')
group.add_argument('--list-years', help='list all years found in folder.nfo files', action='store_true')
group.add_argument('--output',     help='filename to save the playlist to', metavar='PLAYLIST', type=str)
args = parser.parse_args()

if args.list_tags:
    print(','.join(get_all_tags(args.root)))
    sys.exit(0)

if args.list_years:
    print(','.join(get_all_years(args.root)))
    sys.exit(0)

if sys.version_info[0] < 3:
    args.output = args.output.decode('utf-8')
try:
    output_file = open(args.output, 'w')
except:
    logging.error(f'Cannot write file "{args.output}"')
    sys.exit(1)

# Parse the requested tags and make all of them lowercase.
TAGS_ANY = []
TAGS_ALL = []
TAGS_EXCLUDE = []
if args.any:
    TAGS_ANY = [ t.lower().strip() for t in args.any.split(',') ]
if args.all:
    TAGS_ALL = [ t.lower().strip() for t in args.all.split(',') ]
if args.exclude:
    TAGS_EXCLUDE = [ t.lower().strip() for t in args.exclude.split(',') ]

# Parse the requested date criteria.
YEARS = []
DATE_MIN = None
DATE_MAX = None
if args.years:
    YEARS = [ y.strip() for y in args.years.split(',') ]
if args.years is not None and (args.datemin is not None or args.datemax is not None):
    logging.warning('Ignoring --datemin and --datemax args because --years is present')
else:
    DATE_MIN = parse_date_tag(args.datemin)
    DATE_MAX = parse_date_tag(args.datemax)

items_added = []
output_file.write('#EXTM3U-PHOTO-REFRAME\n')

# Get full list of directories and subdirectories.
dir_list = []
for dir_name, subdir_list, file_list in os.walk(args.root):
    dir_list.append(dir_name)

# Directories list is sorted or shuffled.
if args.shuffle:
    random.shuffle(dir_list)
else:
    dir_list.sort()

# Check each directory for criteria matching.
for dir_name in dir_list:
    nfo_file = playlist_file = None
    file_list = []
    # Directory must contain a playlist and an .nfo file.
    for item in os.scandir(dir_name):
        if item.is_file():
            file_list.append(item.name)
    for filename in NFO_FILES:
        if filename in file_list:
            nfo_file = filename
            break
    for filename in PLAYLIST_FILES:
        if filename in file_list:
            playlist_file = filename
            break
    if nfo_file is not None and playlist_file is not None:
        if nfo_match(os.path.join(dir_name, nfo_file)):
            add_playlist_entries(dir_name, playlist_file, output_file)

output_file.close()
